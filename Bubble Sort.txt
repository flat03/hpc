// Bubble Sort

%%writefile parallelbubble.cu


#include<iostream>
#include<omp.h>
using namespace std;

void bubble(int array[], int n){
    for (int i = 0; i < n - 1; i++){
        for (int j = 0; j < n - i - 1; j++){
            if (array[j] > array[j + 1]) 
                swap(array[j], array[j + 1]);
        }
    }
}

void pBubble(int array[], int n){
    // Sort odd indexed numbers
    for(int i = 0; i < n; ++i){
        #pragma omp for
        for (int j = 1; j < n; j += 2){
            if (array[j] < array[j-1])
            {
                swap(array[j], array[j - 1]);
            }
        }
        // Synchronize
        #pragma omp barrier
        // Sort even indexed numbers
        #pragma omp for
        for (int j = 2; j < n; j += 2){
            if (array[j] < array[j-1])
            {
                swap(array[j], array[j - 1]);
            }
        }
    }
}

void printArray(int arr[], int n){
    for(int i = 0; i < n; i++) cout << arr[i] << " ";
    cout << "\n";
}

int main(){
    // Set up variables
    int n;
    cout << "Enter the number of elements: ";
    cin >> n;
    int arr[n];
    int parr[n];

    // Input elements
    cout << "Enter the elements:\n";
    for (int i = 0; i < n; ++i){
        cin >> arr[i];
        parr[i] = arr[i];
    }

    // Sequential time
    double start_time = omp_get_wtime();
    bubble(arr, n);
    double end_time = omp_get_wtime();
    cout << "Sequential Bubble Sort took : " << end_time - start_time << " seconds.\n";
    printArray(arr, n);

    // Parallel time
    start_time = omp_get_wtime();
    pBubble(parr, n);
    end_time = omp_get_wtime();
    cout << "Parallel Bubble Sort took : " << end_time - start_time << " seconds.\n";
    printArray(parr, n);

    return 0;
}

!nvcc -o parallelbubble parallelbubble.cu -Xcompiler -fopenmp
!./parallelbubble
